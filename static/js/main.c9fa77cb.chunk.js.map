{"version":3,"sources":["fbase.js","routes/Auth.js","routes/PostList.js","routes/Comment.js","routes/CommentFactory.js","routes/Post.js","routes/Home.js","routes/Profile.js","routes/Todos/Form.js","routes/Todos/TdTemplate.js","routes/Todos/TdItem.js","routes/Todos/TdList.js","routes/Todo.js","routes/Write.js","routes/AllPost.js","routes/Blogs.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storageService","storage","Auth","useState","email","setEmail","pw","setPw","newAccount","setNewAccount","error","setError","manual","setManual","onChange","e","target","name","value","onSubmit","a","preventDefault","console","log","data","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","PostList","title","createdAt","edit","date","Date","checked","setChecked","getFullYear","getMonth","getDate","Comment","c","post","isOwner","editcomment","setEditComment","onDelete","doc","id","delete","src","img","width","height","alt","creator","text","getHours","getMinutes","CommentFactory","userObj","comment","setComment","comments","setComments","useEffect","collection","onSnapshot","s","commentArray","docs","map","d","sort","b","thispost","add","displayName","creatorId","uid","photoURL","now","length","Post","nick","setNick","profile","editing","setEditing","seeComment","setSeeComment","newTitle","setNewTitle","newPost","setNewPost","photo","newPhoto","setNewPhoto","onDeleteClick","window","confirm","toggleEditing","update","accept","theFile","files","reader","FileReader","onloadend","finishedE","result","currentTarget","readAsDataURL","Home","setName","listing","setListing","listEdit","setListEdit","titles","setTitles","postArray","filter","i","to","t","p","Profile","refreshUser","history","useHistory","newName","setNewName","setPhoto","pbutton","setPbutton","cbutton","setCbutton","mypost","setMyPost","fileURL","fileRef","ref","child","putString","response","getDownloadURL","updateProfile","push","currentUser","then","Form","onKeyPress","TdTemplate","form","children","TdItem","nextProps","nextState","this","props","onToggle","onRemove","stopPropagation","Component","TdList","todos","todoList","Todo","input","setInput","setTodos","handleCreate","newinput","newtodo","space","concat","onCreate","key","newtodos","ind","findIndex","selected","nextTd","Write","setTitle","setPost","attachment","setAttactment","secret","setSecret","AllPost","writer","Blogs","allpost","setAllPost","Navigation","signOut","BlogRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9fa77cb.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAQgYMgzcDHfDvvMYUXEeCilFdCl-HeVc0\",\r\n    authDomain: \"myblog-c1477.firebaseapp.com\",\r\n    projectId: \"myblog-c1477\",\r\n    storageBucket: \"myblog-c1477.appspot.com\",\r\n    messagingSenderId: \"351753636551\",\r\n    appId: \"1:351753636551:web:34c6aec4a834e850bfcce2\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase; \r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\r\nimport { authService } from \"fbase\";\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [pw, setPw] = useState('');\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [manual, setManual] = useState(false);\r\n\r\n    const onChange = (e) => {\r\n        const{target : { name, value }} = e;\r\n        \r\n        if(name === 'email') { setEmail(value); } \r\n        else if(name === 'pw') { setPw(value); }\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            let data;\r\n            console.log(data);\r\n            if(newAccount){\r\n                data = await authService.createUserWithEmailAndPassword(email, pw);\r\n            }\r\n            else {\r\n                data = await authService.signInWithEmailAndPassword(email, pw);\r\n            }\r\n\r\n        } catch(error){\r\n            setError(error.message);\r\n        } \r\n    }\r\n\r\n    const toggleAccount = () => { setNewAccount((prev) => !prev); }\r\n\r\n    return(\r\n        <>\r\n            <form className = 'loginbox' onSubmit = {onSubmit}>\r\n                <p className = 'ltext'>\r\n                    My_Blog<br></br>\r\n                    LOGIN \r\n                </p>\r\n                <input className = 'inputbox'\r\n                    name = 'email'\r\n                    type = 'email'\r\n                    placeholder = '이메일을 입력해주세요'\r\n                    required\r\n                    value = {email}\r\n                    onChange = {onChange}\r\n                />\r\n                <input className = 'inputbox'\r\n                    name = 'pw'\r\n                    type = 'pw'\r\n                    placeholder = '비밀번호를 입력해주세요'\r\n                    required\r\n                    value = {pw}\r\n                    onChange = {onChange}\r\n                />\r\n                { error }\r\n                <input className = 'lbutton' type='submit' value = { newAccount ? '시작하기' :'로그인'} />\r\n                <span className = 'ctext' onClick = {toggleAccount}> { newAccount ? \"이미 계정이 있다면?\" : \"계정 만들기\" } </span>\r\n            </form>\r\n\r\n            <div className = 'manual'>\r\n                <button className = 'mbutton' onClick = {()=> {setManual(prev => !prev)}}> { manual ? '설명서 닫기' : '설명서 열기'} </button>\r\n                { manual && (\r\n                    <p className = 'exp'>\r\n                        마이 블로그 설명서 💭<br/>\r\n                        <br/>1️⃣ 계정 생성 후 프로필을 설정해주세요<br/>\r\n                        (user는 초기 닉네임입니다.)<br/>\r\n                        (프로필 설정 : 홈 화면 왼쪽 프로필 박스의 '블로그관리' 버튼)<br/>\r\n\r\n                        <br/>2️⃣ 홈 화면 프로필 박스 아래 시계를 누르면 투두로 이동합니다<br/>\r\n                        하루 일정을 마이 블로그에 기록해보세요 (❁´◡`❁)<br/>\r\n\r\n                        <br/>3️⃣ 블로그 홈에서는 다른 이용자들이 쓴 글을 볼 수 있어요<br/>\r\n                        단, 홈에서는 글 수정 및 삭제가 불가합니다.\r\n                        (수정/삭제는 '내 블로그' 에서 해주세요!)<br/>\r\n                        블로그 홈에 글이 보이는게 싫다면 글 작성시 '비밀글'로 체크하세요 ✔\r\n\r\n                        <br/>4️⃣ 포스트와 댓글은 작성자 본인만 삭제할 수 있습니다! <br/>\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React, { useState } from 'react';\r\nimport './PostList.css';\r\n\r\nconst PostList = ({ title, createdAt, edit }) =>{\r\n    const date = new Date(createdAt);\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    return(\r\n        <div>\r\n            <div className = 'titleNtime'>\r\n                <p className = 'Title'> \r\n                    { edit && \r\n                        <button className = 'editcheck' onClick = {() => { setChecked(prev => !prev); }}> \r\n                            { checked ? '🔳' : '⬜' } \r\n                        </button>\r\n                    } \r\n                    {title}\r\n                </p> \r\n                <p className = 'Time'>{date.getFullYear()}.{date.getMonth()+1}.{date.getDate()}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostList;","import { dbService } from 'fbase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Comment = ({ c, post, isOwner }) => {\r\n    const date = new Date(c.createdAt);\r\n    const [editcomment, setEditComment] = useState(false);\r\n\r\n    const togglecomment = () => {\r\n        setEditComment(prev => !prev);\r\n    }\r\n\r\n    const onDelete = async () => {\r\n        await dbService.doc(`posts/${post.id}/comments/${c.id}`).delete();\r\n        setEditComment(false);\r\n    }\r\n\r\n    return(\r\n        <div className = 'onecomment'>\r\n            <div className = 'cwriter'>\r\n                <img className = 'cwp' src = {c.img} width = '23px' height = '23px' alt = {c.img} />\r\n                <h6> {c.creator} </h6>\r\n                { isOwner && <button className = 'plusbutton' type = 'button' onClick = {togglecomment}> ⋮ </button> }\r\n            </div>\r\n            <div> \r\n                { editcomment && <button className = 'deletecomment' onClick = {onDelete}> 삭제 </button> } \r\n            </div>\r\n            \r\n            <div>\r\n                <h6 className = 'c_content'> \r\n                    {c.text} <br/><br/>\r\n                    {date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()}\r\n                </h6>    \r\n            </div>    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Comment;","import { dbService } from 'fbase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './CommentFactory.css';\r\nimport Comment from './Comment';\r\n\r\nconst CommentFactory = ({ userObj, post }) => {\r\n    const [comment, setComment] = useState('');\r\n    const [comments, setComments] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        dbService.doc(`posts/${post.id}`).collection('comments').onSnapshot((s) => {\r\n            const commentArray = s.docs.map((d) => ({ id : d.id, creator : d.creator , ...d.data()}));\r\n            commentArray.sort(function(a, b) { return a.createdAt - b.createdAt; });\r\n            setComments(commentArray);\r\n        });\r\n    }, [])\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n    \r\n        const thispost = dbService.collection('posts').doc(`${post.id}`);\r\n        await thispost.collection('comments').add({\r\n            creator : userObj.displayName,\r\n            creatorId : userObj.uid,\r\n            img : userObj.photoURL,\r\n            text : comment,\r\n            createdAt : Date.now()\r\n        });\r\n\r\n        setComment('');\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        const { target : {value} } = e;\r\n        setComment(value);\r\n    }\r\n\r\n    return(\r\n        <div className = 'commentbox'>\r\n            { comments.map((c) => <Comment c = {c} post = {post} isOwner = {userObj.uid === c.creatorId}/>)}\r\n\r\n            <div> {comments.length === 0 ? <></> : <><br/><br/></>} </div>\r\n            \r\n            <form className = 'cbox' onSubmit = {onSubmit}>\r\n                <div className = 'cwriter'>\r\n                    <img className = 'cwp' src = {userObj.photoURL} alt = {userObj.photoURL} width = '23px' height = '23px' /> \r\n                    <h6> {userObj.displayName} </h6>\r\n                </div>\r\n                <input className = 'wcomment'\r\n                    onChange = {onChange}\r\n                    value = {comment}\r\n                    placeholder = '댓글을 입력하세요.'\r\n                    required\r\n                />\r\n                <input className = 'commentbutton' type = 'submit' value = '등록' />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommentFactory;","import { dbService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport './Post.css';\r\nimport CommentFactory from './CommentFactory';\r\n\r\nconst Post = ({ post, userObj, isOwner }) => {\r\n    const [nick, setNick] = useState(userObj.displayName);\r\n    const [profile] = useState(userObj.photoURL);\r\n    const [editing, setEditing] = useState(false);\r\n    const [seeComment, setSeeComment] = useState(false);\r\n\r\n    const date = new Date(post.createdAt);\r\n    const [newTitle, setNewTitle] = useState(post.title);\r\n    const [newPost, setNewPost] = useState(post.post);\r\n    const [newPhoto, setNewPhoto] = useState(post.photo);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(`삭제한 글은 복구가 불가능합니다.\\n글을 삭제하시겠습니까?`);\r\n        if (ok) { \r\n            await dbService.doc(`posts/${post.id}`).delete();\r\n        }\r\n    }\r\n    const toggleEditing = () => {\r\n        setEditing(prev => !prev);\r\n    }\r\n    const onChange = (e) => {\r\n        const{ target : {name, value} } = e;\r\n\r\n        if(name === 'title') { setNewTitle(value); }\r\n        else if (name === 'post') { setNewPost(value); }\r\n    }\r\n    const onFileChange = (e) => {\r\n        const{ target : { files } } = e;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedE) => {\r\n            const { currentTarget : {result} } = finishedE;\r\n            setNewPhoto(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        dbService.doc(`posts/${post.id}`).update({\r\n            title : newTitle,\r\n            post : newPost,\r\n            photo : newPhoto\r\n        });\r\n        setEditing(false);\r\n    }\r\n\r\n    if(nick === null){ setNick('user'); }\r\n\r\n    return(\r\n        <div>\r\n            { editing ? (\r\n                <div className = 'editboxx'>\r\n                    <form className = 'editing' onSubmit = {onSubmit}> \r\n                        <input className = 'titlebox'\r\n                            name = 'title'\r\n                            type='title' \r\n                            placeholder = \"새 제목\" \r\n                            value = {newTitle}\r\n                            onChange = {onChange}\r\n                            required\r\n                        />\r\n                        <div className = 'writerntime'>\r\n                            <img className = 'wrphoto' src = {profile} width = '30px' height = '30px' alt = {profile} />\r\n                            <p>{nick }</p>\r\n                            <p className = 'time'> ・{date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()} </p>\r\n                        </div>\r\n                        { newPhoto && <img className = 'postphoto' src={newPhoto} width = '200px' height = '200px' alt= {newPhoto}/> }\r\n                        <input className = 'photobox'\r\n                            type = 'file'\r\n                            accept = 'image/*'\r\n                            onChange = {onFileChange}\r\n                        />\r\n                        <input className = 'postbox'\r\n                            name = 'post'\r\n                            type='post' \r\n                            placeholder = \"새 본문\" \r\n                            value = {newPost} \r\n                            onChange = {onChange}\r\n                            required\r\n                        /> \r\n                        <input className = 'ebutton' type='submit' value = '수정' />\r\n                        <button className = 'ecbutton' onClick = {toggleEditing}> 취소 </button>\r\n                    </form>\r\n                </div>    \r\n                ) :\r\n                <div className = 'one'>\r\n                    <p className = 'postitle'> {post.title} </p>\r\n                    <div className = 'writerntime'>\r\n                        <img className = 'wrphoto' src = {profile} width = '30px' height = '30px' alt = {profile} />\r\n                        <p>{nick }</p>\r\n                        <p className = 'time'> ・{date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()} </p>\r\n                    </div>\r\n                    { post.photo && <img className = 'postphoto' src={post.photo} width = '200px' height = '200px' alt= {post.photo}/> }\r\n                    <p className = 'text'> {post.post}</p>\r\n                    \r\n                    <div className = 'buttons'>\r\n                        <>\r\n                            <button className = 'editNdelete' onClick = {toggleEditing}> 수정 </button>\r\n                            <button className = 'editNdelete' onClick = {onDeleteClick}> 삭제 </button>\r\n                        </>     \r\n                    </div>\r\n                    <div className = 'comment'>\r\n                        <button onClick = {() => {setSeeComment(prev => !prev)}} type = 'button'> { seeComment ? '댓글창 닫기' : '댓글창 열기'} </button>\r\n                        { seeComment && <CommentFactory userObj = {userObj} post = {post} isOwner = {isOwner}/> }\r\n                    </div>\r\n                    <br></br>\r\n                </div> \r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, { useEffect, useState } from 'react';\r\nimport { dbService } from 'fbase';\r\nimport { Link } from 'react-router-dom';\r\nimport PostList from './PostList';\r\nimport Post from './Post';\r\nimport './Home.css';\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [name, setName] = useState(userObj.displayName);\r\n    const [photo] = useState(userObj.photoURL);\r\n    const [listing, setListing] = useState(false);\r\n    const [listEdit, setListEdit] = useState(true);\r\n    const [titles, setTitles] = useState([]);\r\n    const date = new Date();\r\n    \r\n    useEffect(() => {\r\n        dbService.collection('posts').onSnapshot((s) => {\r\n            let postArray = s.docs.map((d) => ({id : d.id, creator : d.creator , ...d.data()}));\r\n            postArray = postArray.filter(i => i.creator === userObj.uid);\r\n            postArray.sort(function(a, b) { return b.createdAt - a.createdAt; });\r\n            setTitles(postArray);\r\n        })\r\n    }, []);\r\n\r\n    if(name === null){ setName('user'); }\r\n    \r\n    return(\r\n        <section className = 'entire'>\r\n            <div>\r\n                <div className = 'profilebox'>\r\n                    <img src = {photo} width = '161px' height = '184px' alt = {photo}/>\r\n                    <div className = 'nick'>\r\n                        <strong> {name} </strong>\r\n                        <h5 className = 'email'> ({userObj.email}) </h5>\r\n                    </div>\r\n                    <h6 className = 'profilebutton'><Link to ='/profile'> 블로그관리 </Link></h6>\r\n                    <h6 className = 'writebutton'><Link to ='/write'> 글쓰기 </Link></h6>\r\n                </div>\r\n                <p className = 'timetotd'><Link to ='/todo'> { date.getHours() }:{ date.getMinutes() } </Link></p>\r\n            </div>\r\n\r\n            <div className = 'rightbox'>\r\n                <div className = 'listbox'>\r\n                    <button className = 'listbutton' onClick = {() => { \r\n                        setListing(prev => !prev); \r\n                        setListEdit(prev => !prev);\r\n                    }}> \r\n                        { listing ? '목록 닫기' : '목록 열기' } \r\n                    </button>\r\n                    <p className = 'postcount'>・ { titles.length }개의 글</p>\r\n                </div>\r\n                <div className = 'list'>\r\n                    { listing &&\r\n                        (titles.map(t => \r\n                            <PostList key = {t.createdAt} createdAt = {t.createdAt} title = {t.title} edit = {listEdit}/>\r\n                    ))}\r\n                    { listing && \r\n                        <button className = 'editbutton' onClick = {() => { setListEdit(prev => !prev); }}> \r\n                            { listEdit ? '글관리 닫기 ' : '글관리 열기' }\r\n                        </button>\r\n                    }\r\n                </div>\r\n                <br></br>\r\n                <div className = 'posts'> { titles.map(p => <Post key = {p.createdAt} post = {p} userObj = {userObj} isOwner = {true}/> )} </div>  \r\n            </div>      \r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Home;","import { authService, dbService, storageService } from 'fbase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Profile.css';\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n    const history = useHistory();\r\n    const [newName, setNewName] = useState(userObj.displayName);\r\n    const [photo, setPhoto] = useState(userObj.photoURL);\r\n    const [pbutton, setPbutton] = useState(false);\r\n    const [cbutton, setCbutton] = useState(false);\r\n    const [mypost, setMyPost] = useState([]);\r\n\r\n    useEffect(() => {\r\n        dbService.collection('posts').onSnapshot((s) => {\r\n            let postArray = s.docs.map((d) => ({id : d.id, creator : d.creator , ...d.data()}));\r\n            postArray = postArray.filter(i => i.creator === userObj.uid);\r\n            setMyPost(postArray);\r\n        })\r\n    }, []);\r\n    const onSubmit = async (e) => {\r\n        let fileURL = '';\r\n\r\n        e.preventDefault();\r\n        if(userObj.photoURL !== photo){\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/photo`);\r\n            const response = await fileRef.putString(photo, \"data_url\");\r\n            fileURL = await response.ref.getDownloadURL();\r\n            \r\n            await userObj.updateProfile({ photoURL : fileURL });\r\n            refreshUser();\r\n        }\r\n        if(userObj.displayName !== newName) {\r\n            await userObj.updateProfile({ displayName : newName });\r\n            refreshUser();\r\n        }\r\n\r\n        history.push('/');\r\n    }\r\n    const onChange = (e) => {\r\n        const { target : {value} } = e;\r\n        setNewName(value);\r\n    }\r\n    const onFileChange = (e) => {\r\n        const{ target : { files } } = e;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedE) => {\r\n            const { currentTarget : {result} } = finishedE;\r\n            setPhoto(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onDelete = async () => {\r\n        const ok = window.confirm(`진짜 삭제하시겠습니까?\\n(확인을 누르면 로그인 화면,\\n취소를 누르면 내 블로그 홈으로 이동합니다)`);\r\n        if(ok) {\r\n            await mypost.map((post) => { dbService.doc(`posts/${post.id}`).delete(); });\r\n            const user = authService.currentUser;\r\n            user.delete().then(() => {\r\n                authService.delete();\r\n            })\r\n        } \r\n        history.push('/');     \r\n    }\r\n    \r\n    return(\r\n        <section className = 'boxes'> \r\n            <div className = 'pbutton'>\r\n                <button className = 'b' onClick = {() => { setPbutton(prev => !prev); }}> 프로필 </button>\r\n                { pbutton &&\r\n                    <div className = 'eentire'>\r\n                        <form className = 'editbox' onSubmit = {onSubmit}>\r\n                            <img className = 'image' src = {photo} width = '161px' height = '184px' alt={photo} />\r\n                            <input className = 'image-upload'\r\n                                type = 'file'\r\n                                accept = 'image/*'\r\n                                onChange = {onFileChange}\r\n                            />\r\n                            <input className = 'newnick'\r\n                                type = 'newName'\r\n                                value = {newName}\r\n                                placeholder = '새 닉네임을 입력하세요'\r\n                                onChange = {onChange}\r\n                            /> \r\n                            <input className = 'newprofile' type = 'submit' value = '수정' />\r\n                            <button className = 'cancleprofile' onClick = {() => { setPbutton(prev => !prev); } }> 취소 </button>\r\n                        </form>\r\n                    </div>}       \r\n                \r\n            </div>\r\n\r\n            <div className = 'cbutton'>\r\n                <button className = 'c' onClick = {() => { setCbutton(prev => !prev); }}> 회원 탈퇴 </button>\r\n                { cbutton && \r\n                    <div>\r\n                    <form className = 'editbox'>\r\n                        <p className = 'deletext'>\r\n                            ( 현재 로그인 중인 계정 : {userObj.email} )<br/><br/>\r\n                            회원 탈퇴시 작성한 글은 모두 삭제되며,<br/>\r\n                            삭제된 블로그는 복구가 불가능합니다.<br/>\r\n                            정말 삭제하시겠습니까?<br/>\r\n                        </p>\r\n                        <button className = 'deleteblog' onClick = {() => { onDelete(); }}> 확인 </button>\r\n                        <button className = 'cancledelete' onClick = {() => { setCbutton(prev => !prev); } }> 취소 </button>\r\n                    </form>\r\n                    </div>}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({ value, onChange, onKeyPress }) => {\r\n    return(\r\n        <>\r\n            <input className = \"form\"\r\n                value = { value } \r\n                onChange = { onChange } \r\n                onKeyPress = { onKeyPress } \r\n                placeholder = '할 일을 입력하세요'\r\n            /> \r\n        </>\r\n    );\r\n}\r\nexport default Form;","import React from 'react';\r\nimport './TdTemplate.css';\r\n\r\nconst TdTemplate = ({ form, children }) => {\r\n    return(\r\n        <div className = \"tdtemplate\">\r\n                <section className = \"form-wrapper\">\r\n                    { form }\r\n                </section>\r\n\r\n                <section className = \"todo\">\r\n                    { children }\r\n                </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TdTemplate;\r\n","import React, { Component } from 'react';\r\nimport './TdItem.css';\r\n\r\nclass TdItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render(){\r\n        const { text, checked, id, onToggle, onRemove } = this.props;\r\n \r\n        return(\r\n            <div className = \"todo-item\" onClick = {() => onToggle(id)}>\r\n                <div className = \"remove\" onClick = {(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id); \r\n                }}>\r\n                    &times;\r\n                </div>\r\n                    \r\n                <div className = 'todo-text'>\r\n                    <div> { text } </div>\r\n                </div>\r\n\r\n                 { checked && (<div className=\"check-mark\"> ✓ </div>) }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TdItem;","import React, { Component } from 'react';\r\nimport TdItem from \"./TdItem\";\r\n\r\nclass TdList extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render(){\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map( \r\n            ({id, text, checked}) => (\r\n                <TdItem \r\n                        id = {id} \r\n                        text = {text} \r\n                        checked = {checked} \r\n                        onToggle = {onToggle}\r\n                        onRemove = {onRemove}\r\n                        key = {id}\r\n                />\r\n        ));\r\n\r\n        return(\r\n            <div>\r\n                { todoList }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TdList;","import React, { useState } from 'react';\r\n\r\nimport Form from './Todos/Form';\r\nimport TdTemplate from './Todos/TdTemplate';\r\nimport TdList from './Todos/TdList';\r\n\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './Todo.css';\r\n\r\nconst Todo = () => {\r\n    let date = new Date();\r\n    const [value, onChange] = useState(date);\r\n    \r\n    let id = 0;\r\n    const [input, setInput] = useState('');\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n    \r\n    const handleCreate = () => {\r\n        const newinput = input;\r\n        const newtodo = todos;\r\n        let space = 0;\r\n    \r\n        for(let i of newinput){\r\n          if(i === ' ')\r\n            space += 1;\r\n        }\r\n    \r\n        if(space === newinput.length)\r\n          setInput('');\r\n    \r\n        else {\r\n          setInput('');\r\n          console.log('1:',id);\r\n          setTodos(newtodo.concat({ id : id++, text : input, checked : false }));\r\n          console.log('2:',id);\r\n        }\r\n    }\r\n    \r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter') {\r\n          handleCreate();\r\n        }\r\n    }\r\n    \r\n    const handleToggle = (id) => {\r\n        const newtodos = todos;\r\n        \r\n        const ind = newtodos.findIndex(i => i.id === id);\r\n        const selected = newtodos[ind];\r\n        const nextTd = [...newtodos];\r\n    \r\n        nextTd[ind] = { ...selected, checked : !selected.checked };\r\n        setTodos(nextTd);\r\n    }\r\n    \r\n    const handleRemove = (id) => {\r\n        const td = todos;\r\n        setTodos(td.filter(i => i.id !== id));\r\n    }\r\n\r\n    return(\r\n        <div className = 'todobox'>\r\n            <Calendar\r\n                    onChange = {onChange}\r\n                    value = {value}\r\n                />\r\n            <div className = 'realtodobox'>\r\n                <p className = 'title2'> 오늘 할 일 </p>\r\n                <TdTemplate \r\n                        form = { \r\n                            <Form \r\n                                value = { input }  \r\n                                onChange = { handleChange }\r\n                                onCreate = { handleCreate }\r\n                                onKeyPress = { handleKeyPress }\r\n                            /> \r\n                        }>\r\n                        <TdList \r\n                            todos = { todos } \r\n                            onToggle = { handleToggle } \r\n                            onRemove = { handleRemove }\r\n                        />\r\n                    </TdTemplate>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import { dbService } from 'fbase';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nimport './Write.css';\r\n\r\nconst Write = ({ userObj }) => {\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState('');\r\n    const [post, setPost] = useState('');\r\n    const [attachment, setAttactment] = useState(''); \r\n    const [secret, setSecret] = useState(false);\r\n\r\n    const onChange = (e) => {\r\n        let { target : {name, value} } = e;\r\n        if(name === 'title'){ setTitle(value); } \r\n        else if(name = 'post'){ setPost(value); }\r\n    }\r\n    const onFileChange = (e) => {\r\n        const{ target : { files } } = e;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedE) => {\r\n            const { currentTarget : {result} } = finishedE;\r\n            setAttactment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        await dbService.collection('posts').add({\r\n            title : title,\r\n            post : post,\r\n            photo : attachment,\r\n            createdAt : Date.now(),\r\n            creator : userObj.uid,\r\n            nick : userObj.email,\r\n            secret : secret\r\n        });\r\n\r\n        history.push('/');\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <form className = 'writebox' onSubmit = {onSubmit}>\r\n                <input className = 'wtitle'\r\n                    type = 'title'\r\n                    value = {title}\r\n                    name = 'title'\r\n                    onChange = {onChange}\r\n                    placeholder = '제목을 입력하세요'\r\n                    required\r\n                />              \r\n                <input className = 'wpost'\r\n                    type = 'post'\r\n                    value = {post}\r\n                    name = 'post'\r\n                    onChange = {onChange}\r\n                    placeholder = '본문을 입력하세요'\r\n                    required\r\n                />\r\n                <input className = 'wphoto' type = 'file' accept = 'image/*' onChange = {onFileChange} />\r\n                <button className = 'secret' onClick = {() => {setSecret(prev => !prev)}} type = 'button'> { secret ? '비밀글 🔏' : '전체공개'} </button>  \r\n                <input className = 'finishbutton' type = 'submit' value = '작성' />\r\n                <button className = 'canclebutton' onClick = {() => {history.push('/');}}> 취소 </button>\r\n            </form>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Write;","import React, { useState } from 'react';\r\nimport CommentFactory from './CommentFactory';\r\n\r\nconst AllPost = ({ userObj, post }) => {\r\n    const date = new Date(post.createdAt);\r\n    const writer = post.nick;\r\n    const [seeComment, setSeeComment] = useState(false);\r\n\r\n    return(\r\n        <div className = 'one'>\r\n            <p className = 'postitle'> {post.title} </p>\r\n            <div className = 'writerntime'>\r\n                <p>{writer }</p>\r\n                <p className = 'time'> ・{date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()} </p>\r\n            </div>\r\n            { post.photo && <img className = 'postphoto' src={post.photo} width = '200px' height = '200px' alt= {post.photo}/> }\r\n            <p className = 'text'> {post.post}</p>\r\n\r\n            <div className = 'comment'>\r\n                <button onClick = {() => {setSeeComment(prev => !prev)}} type = 'button'> { seeComment ? '댓글창 닫기' : '댓글창 열기'} </button>\r\n                { seeComment && <CommentFactory userObj = {userObj} post = {post} /> }\r\n            </div>\r\n            <br></br>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AllPost;","import { dbService } from 'fbase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Blogs.css';\r\nimport AllPost from './AllPost';\r\n\r\nconst Blogs = ({ userObj }) => {\r\n    const [allpost, setAllPost] = useState([]);\r\n    useEffect(() => {\r\n        dbService.collection('posts').onSnapshot((s) => {\r\n            let postArray = s.docs.map((d) => ({id : d.id, creator : d.creator , ...d.data()}));\r\n            postArray.sort(function(a, b) { return b.createdAt - a.createdAt; });\r\n            postArray = postArray.filter(i => i.secret === false);\r\n            setAllPost(postArray);\r\n        })\r\n    }, []);\r\n\r\n    return(\r\n        <div className = 'eeentire'>\r\n            <div className = 'atext'>\r\n                <p> 🏡 </p>\r\n                <h6> \r\n                    홈에서 다른 이용자들이 쓴 글을 읽고,\r\n                    마음에 드는 글에 댓글을 달아보세요! <br/>\r\n                    <br/>(비밀글로 작성한 포스트는 블로그 홈에 노출되지 않습니다.) \r\n                </h6>\r\n            </div>\r\n            <br></br>\r\n            <div className = 'allpost'> \r\n                { allpost.map(p => <AllPost userObj = {userObj} post = {p}/> )} \r\n            </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Blogs;","import { authService } from 'fbase';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => {\r\n    const history = useHistory();\r\n\r\n    return(\r\n        <nav>\r\n            <ul className = 'menu'>\r\n                <li><button className = 'button' onClick = {() => { history.push('/allblog');}}> 블로그 홈 </button></li>\r\n                <li><button className = 'button' onClick = {() => { history.push('/');}}> 내 블로그 </button> </li>\r\n                <li><button className = 'button' onClick = {() => {\r\n                    authService.signOut();\r\n                    history.push('/');\r\n                }}> 로그아웃 </button></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from 'routes/Auth';\r\nimport Home from 'routes/Home';\r\nimport Profile from 'routes/Profile';\r\nimport Todo from 'routes/Todo';\r\nimport Write from 'routes/Write';\r\nimport Blogs from 'routes/Blogs';\r\nimport Navigation from 'components/Navigation';\r\n\r\nfunction BlogRouter({ userObj, isLoggedIn, refreshUser }) {\r\n    return(\r\n        <Router>\r\n            { isLoggedIn && <Navigation/> }\r\n            <Switch>\r\n                { isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path = \"/\">\r\n                            <Home userObj = {userObj} refreshUser = {refreshUser}/>\r\n                        </Route>\r\n                        <Route exact path = \"/profile\">\r\n                            <Profile userObj = {userObj} refreshUser = {refreshUser}/>\r\n                        </Route>\r\n                        <Route exact path = \"/todo\">\r\n                            <Todo />\r\n                        </Route>\r\n                        <Route exact path = '/write'>\r\n                            <Write userObj = {userObj}/>\r\n                        </Route>\r\n                        <Route exact path = '/allblog'>\r\n                            <Blogs userObj = {userObj}/>\r\n                        </Route>\r\n                    </> \r\n                ) : (\r\n                    <Route exact path = \"/\">\r\n                        <Auth />\r\n                    </Route>\r\n                )}  \r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default BlogRouter;","import React, { useEffect, useState } from 'react';\nimport { authService } from \"fbase\";\nimport BlogRouter from './Router';\nimport './App.css';\n\nfunction App() {\n  const[init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) { \n        setUserObj({\n          displayName : user.displayName,\n          uid : user.uid,\n          email : user.email,\n          photoURL : user.photoURL,\n          updateProfile : (args) => user.updateProfile(args)\n        });\n      } else { setUserObj(null); }\n      setInit(true);\n    }\n  )}, []);\n\n  const refreshUser = () => {\n    setUserObj(authService.currentUser);\n  };\n\n  return (\n    <>\n    { init ?\n      <BlogRouter\n        userObj = {userObj}\n        isLoggedIn = {Boolean(userObj)}\n        refreshUser = {refreshUser}\n      /> :\n      <p className = 'loading'> 로딩중. . .  </p>\n    }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}