{"version":3,"sources":["fbase.js","routes/Auth.js","routes/PostList.js","routes/Post.js","routes/Home.js","routes/Profile.js","routes/Todos/Form.js","routes/Todos/TdTemplate.js","routes/Todos/TdItem.js","routes/Todos/TdList.js","routes/Todo.js","routes/Write.js","routes/AllPost.js","routes/Blogs.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storageService","storage","Auth","useState","email","setEmail","pw","setPw","newAccount","setNewAccount","error","setError","manual","setManual","onChange","e","target","name","value","onSubmit","a","preventDefault","console","log","data","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","PostList","title","createdAt","edit","date","Date","checked","setChecked","getFullYear","getMonth","getDate","Post","post","userObj","isOwner","displayName","nick","setNick","photoURL","profile","editing","setEditing","newTitle","setNewTitle","newPost","setNewPost","photo","newPhoto","setNewPhoto","onDeleteClick","window","confirm","doc","id","delete","toggleEditing","update","src","width","height","alt","getHours","getMinutes","accept","theFile","files","reader","FileReader","onloadend","finishedE","result","currentTarget","readAsDataURL","Home","setName","listing","setListing","listEdit","setListEdit","titles","setTitles","useEffect","collection","onSnapshot","s","postArray","docs","map","d","creator","filter","i","uid","sort","b","to","length","t","p","Profile","refreshUser","history","useHistory","newName","setNewName","setPhoto","pbutton","setPbutton","cbutton","setCbutton","mypost","setMyPost","fileURL","fileRef","ref","child","putString","response","getDownloadURL","updateProfile","push","onDelete","currentUser","then","Form","onKeyPress","TdTemplate","form","children","TdItem","nextProps","nextState","this","props","text","onToggle","onRemove","stopPropagation","Component","TdList","todos","todoList","Todo","input","setInput","setTodos","handleCreate","newinput","newtodo","space","concat","onCreate","key","newtodos","ind","findIndex","selected","nextTd","Write","setTitle","setPost","attachment","setAttactment","add","now","AllPost","writer","Blogs","allpost","setAllPost","Navigation","signOut","BlogRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4aAcAA,IAASC,cATc,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKqBP,IAAzB,IACMQ,EAAcR,IAASS,OACvBC,EAAYV,IAASW,YACrBC,EAAiBZ,IAASa,U,uDCqExBC,EApFF,WACT,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoBF,mBAAS,IAA7B,mBAAOG,EAAP,KAAWC,EAAX,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KAEMC,EAAW,SAACC,GACd,MAAkCA,EAA5BC,OAAWC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,MAEX,UAATD,EAAoBZ,EAASa,GACf,OAATD,GAAiBV,EAAMW,IAG7BC,EAAQ,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,yDACbL,EAAEM,iBADW,SAKTC,QAAQC,IAAIC,IACThB,EANM,gCAOQZ,EAAY6B,+BAA+BrB,EAAOE,GAP1D,OAOLkB,EAPK,+CAUQ5B,EAAY8B,2BAA2BtB,EAAOE,GAVtD,QAULkB,EAVK,iEAcTb,EAAS,KAAMgB,SAdN,0DAAH,sDAoBd,OACI,qCACI,uBAAMC,UAAY,WAAWT,SAAYA,EAAzC,UACI,oBAAGS,UAAY,QAAf,oBACW,uBADX,WAIA,uBAAOA,UAAY,WACfX,KAAO,QACPY,KAAO,QACPC,YAAc,gEACdC,UAAQ,EACRb,MAASd,EACTU,SAAYA,IAEhB,uBAAOc,UAAY,WACfX,KAAO,KACPY,KAAO,KACPC,YAAc,sEACdC,UAAQ,EACRb,MAASZ,EACTQ,SAAYA,IAEdJ,EACF,uBAAOkB,UAAY,UAAUC,KAAK,SAASX,MAAUV,EAAa,2BAAQ,uBAC1E,uBAAMoB,UAAY,QAAQI,QA3BhB,WAAQvB,GAAc,SAACwB,GAAD,OAAWA,MA2B3C,cAAuDzB,EAAa,sDAAgB,kCAApF,UAGJ,sBAAKoB,UAAY,SAAjB,UACI,yBAAQA,UAAY,UAAUI,QAAW,WAAMnB,GAAU,SAAAoB,GAAI,OAAKA,MAAlE,cAA6ErB,EAAS,kCAAW,kCAAjG,OACEA,GACE,oBAAGgB,UAAY,MAAf,4EACiB,uBACb,uBAFJ,+GAEgC,uBAFhC,kEAGsB,uBAHtB,2JAIyC,uBAErC,uBANJ,yKAM6C,uBAN7C,uIAOiC,uBAE7B,uBATJ,6JAS2C,uBAT3C,gLAU0C,uBAV1C,qGAW2B,iC,QCxDhCM,G,MArBE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,KAC5BC,EAAO,IAAIC,KAAKH,GACtB,EAA8BjC,oBAAS,GAAvC,mBAAOqC,EAAP,KAAgBC,EAAhB,KAEA,OACI,8BACI,sBAAKb,UAAY,aAAjB,UACI,oBAAGA,UAAY,QAAf,UACMS,GACE,wBAAQT,UAAY,YAAYI,QAAW,WAAQS,GAAW,SAAAR,GAAI,OAAKA,MAAvE,SACMO,EAAU,eAAO,WAG1BL,KAEL,oBAAGP,UAAY,OAAf,UAAuBU,EAAKI,cAA5B,IAA4CJ,EAAKK,WAAW,EAA5D,IAAgEL,EAAKM,oBC8FtEC,G,MA5GF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC3B,EAAwB7C,mBAAS4C,EAAQE,aAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkBhD,mBAAS4C,EAAQK,UAA5BC,EAAP,oBACA,EAA8BlD,oBAAS,GAAvC,mBAAOmD,EAAP,KAAgBC,EAAhB,KAEMjB,EAAO,IAAIC,KAAKO,EAAKV,WAC3B,EAAgCjC,mBAAS2C,EAAKX,OAA9C,mBAAOqB,EAAP,KAAiBC,EAAjB,KACA,EAA8BtD,mBAAS2C,EAAKA,MAA5C,mBAAOY,EAAP,KAAgBC,EAAhB,KACA,EAAgCxD,mBAAS2C,EAAKc,OAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAa,uCAAG,sBAAA3C,EAAA,0DACP4C,OAAOC,QAAP,4JADO,gCAEFnE,EAAUoE,IAAV,gBAAuBpB,EAAKqB,KAAMC,SAFhC,2CAAH,qDAIbC,EAAgB,WAClBd,GAAW,SAAAtB,GAAI,OAAKA,MAElBnB,EAAW,SAACC,GACd,MAAkCA,EAA3BC,OAAUC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,MAEX,UAATD,EAAoBwC,EAAYvC,GACjB,SAATD,GAAmB0C,EAAWzC,IAyB3C,OAFY,OAATgC,GAAgBC,EAAQ,QAGvB,8BACMG,EACE,qBAAK1B,UAAY,WAAjB,SACI,uBAAMA,UAAY,UAAUT,SAhB3B,SAACJ,GACdA,EAAEM,iBACFvB,EAAUoE,IAAV,gBAAuBpB,EAAKqB,KAAMG,OAAO,CACrCnC,MAAQqB,EACRV,KAAOY,EACPE,MAAQC,IAEZN,GAAW,IASC,UACI,uBAAO3B,UAAY,WACfX,KAAO,QACPY,KAAK,QACLC,YAAc,sBACdZ,MAASsC,EACT1C,SAAYA,EACZiB,UAAQ,IAEZ,sBAAKH,UAAY,cAAjB,UACI,qBAAKA,UAAY,UAAU2C,IAAOlB,EAASmB,MAAQ,OAAOC,OAAS,OAAOC,IAAOrB,IACjF,4BAAIH,IACJ,oBAAGtB,UAAY,OAAf,oBAAyBU,EAAKI,cAA9B,KAA+CJ,EAAKK,WAAW,EAA/D,KAAoEL,EAAKM,UAAzE,IAAqFN,EAAKqC,WAA1F,IAAuGrC,EAAKsC,aAA5G,UAEFf,GAAY,qBAAKjC,UAAY,YAAY2C,IAAKV,EAAUW,MAAQ,QAAQC,OAAS,QAAQC,IAAMb,IACjG,uBAAOjC,UAAY,WACfC,KAAO,OACPgD,OAAS,UACT/D,SA7CH,SAACC,GAClB,IACM+D,EADwB/D,EAAvBC,OAAW+D,MACI,GAChBC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,SAACC,GAChB,IAAyBC,EAAYD,EAA7BE,cAAiBD,OACzBtB,EAAYsB,IAEhBJ,EAAOM,cAAcR,MAsCL,uBAAOlD,UAAY,UACfX,KAAO,OACPY,KAAK,OACLC,YAAc,sBACdZ,MAASwC,EACT5C,SAAYA,EACZiB,UAAQ,IAEZ,uBAAOH,UAAY,UAAUC,KAAK,SAASX,MAAQ,iBACnD,wBAAQU,UAAY,WAAWI,QAAWqC,EAA1C,iCAIR,sBAAKzC,UAAY,MAAjB,UACI,oBAAGA,UAAY,WAAf,cAA4BkB,EAAKX,MAAjC,OACA,sBAAKP,UAAY,cAAjB,UACI,qBAAKA,UAAY,UAAU2C,IAAOlB,EAASmB,MAAQ,OAAOC,OAAS,OAAOC,IAAOrB,IACjF,4BAAIH,IACJ,oBAAGtB,UAAY,OAAf,oBAAyBU,EAAKI,cAA9B,KAA+CJ,EAAKK,WAAW,EAA/D,KAAoEL,EAAKM,UAAzE,IAAqFN,EAAKqC,WAA1F,IAAuGrC,EAAKsC,aAA5G,UAEF9B,EAAKc,OAAS,qBAAKhC,UAAY,YAAY2C,IAAKzB,EAAKc,MAAOY,MAAQ,QAAQC,OAAS,QAAQC,IAAM5B,EAAKc,QAC1G,oBAAGhC,UAAY,OAAf,cAAwBkB,EAAKA,QAE7B,qBAAKlB,UAAY,UAAjB,SACMoB,GACE,qCACA,wBAAQpB,UAAY,cAAcI,QAAWqC,EAA7C,4BACA,wBAAQzC,UAAY,cAAcI,QAAW+B,EAA7C,iCAIR,8BCpCLwB,G,MA9DF,SAAC,GAAiB,IAAfxC,EAAc,EAAdA,QACZ,EAAwB5C,mBAAS4C,EAAQE,aAAzC,mBAAOhC,EAAP,KAAauE,EAAb,KACA,EAAgBrF,mBAAS4C,EAAQK,UAA1BQ,EAAP,oBACA,EAA8BzD,oBAAS,GAAvC,mBAAOsF,EAAP,KAAgBC,EAAhB,KACA,EAAgCvF,oBAAS,GAAzC,mBAAOwF,EAAP,KAAiBC,EAAjB,KACA,EAA4BzF,mBAAS,IAArC,mBAAO0F,EAAP,KAAeC,EAAf,KACMxD,EAAO,IAAIC,KAajB,OAXAwD,qBAAU,WACNjG,EAAUkG,WAAW,SAASC,YAAW,SAACC,GACtC,IAAIC,EAAYD,EAAEE,KAAKC,KAAI,SAACC,GAAD,oBAASnC,GAAKmC,EAAEnC,GAAIoC,QAAUD,EAAEC,SAAaD,EAAE9E,YAC1E2E,EAAYA,EAAUK,QAAO,SAAAC,GAAC,OAAIA,EAAEF,UAAYxD,EAAQ2D,QAC9CC,MAAK,SAASvF,EAAGwF,GAAK,OAAOA,EAAExE,UAAYhB,EAAEgB,aACvD0D,EAAUK,QAEf,IAES,OAATlF,GAAgBuE,EAAQ,QAGvB,0BAAS5D,UAAY,SAArB,UACI,gCACI,sBAAKA,UAAY,aAAjB,UACI,qBAAK2C,IAAOX,EAAOY,MAAQ,QAAQC,OAAS,QAAQC,IAAOd,IAC3D,sBAAKhC,UAAY,OAAjB,UACI,uCAAUX,EAAV,OACA,qBAAIW,UAAY,QAAhB,eAA2BmB,EAAQ3C,MAAnC,WAEJ,oBAAIwB,UAAY,gBAAhB,SAAgC,cAAC,IAAD,CAAMiF,GAAI,WAAV,gDAChC,oBAAIjF,UAAY,cAAhB,SAA8B,cAAC,IAAD,CAAMiF,GAAI,SAAV,uCAElC,mBAAGjF,UAAY,WAAf,SAA0B,eAAC,IAAD,CAAMiF,GAAI,QAAV,cAAqBvE,EAAKqC,WAA1B,IAAyCrC,EAAKsC,aAA9C,YAG9B,sBAAKhD,UAAY,WAAjB,UACI,sBAAKA,UAAY,UAAjB,UACI,wBAAQA,UAAY,aAAaI,QAAW,WACxC0D,GAAW,SAAAzD,GAAI,OAAKA,KACpB2D,GAAY,SAAA3D,GAAI,OAAKA,MAFzB,SAIMwD,EAAU,4BAAU,8BAE1B,oBAAG7D,UAAY,YAAf,oBAA+BiE,EAAOiB,OAAtC,4BAEJ,sBAAKlF,UAAY,OAAjB,UACM6D,GACGI,EAAOQ,KAAI,SAAAU,GAAC,OACT,cAAC,EAAD,CAA8B3E,UAAa2E,EAAE3E,UAAWD,MAAS4E,EAAE5E,MAAOE,KAAQsD,GAAjEoB,EAAE3E,cAEzBqD,GACE,wBAAQ7D,UAAY,aAAaI,QAAW,WAAQ4D,GAAY,SAAA3D,GAAI,OAAKA,MAAzE,SACM0D,EAAW,mCAAY,uCAIrC,uBACA,sBAAK/D,UAAY,QAAjB,cAA4BiE,EAAOQ,KAAI,SAAAW,GAAC,OAAI,cAAC,EAAD,CAA0BlE,KAAQkE,EAAGjE,QAAWA,EAASC,SAAW,GAAvDgE,EAAE5E,cAA3D,eCiDD6E,G,MA3GC,SAAC,GAA8B,IAA5BlE,EAA2B,EAA3BA,QAASmE,EAAkB,EAAlBA,YAClBC,EAAUC,cAChB,EAA8BjH,mBAAS4C,EAAQE,aAA/C,mBAAOoE,EAAP,KAAgBC,EAAhB,KACA,EAA0BnH,mBAAS4C,EAAQK,UAA3C,mBAAOQ,EAAP,KAAc2D,EAAd,KACA,EAA8BpH,oBAAS,GAAvC,mBAAOqH,EAAP,KAAgBC,EAAhB,KACA,EAA8BtH,oBAAS,GAAvC,mBAAOuH,EAAP,KAAgBC,EAAhB,KACA,EAA4BxH,mBAAS,IAArC,mBAAOyH,EAAP,KAAeC,EAAf,KAEA9B,qBAAU,WACNjG,EAAUkG,WAAW,SAASC,YAAW,SAACC,GACtC,IAAIC,EAAYD,EAAEE,KAAKC,KAAI,SAACC,GAAD,oBAASnC,GAAKmC,EAAEnC,GAAIoC,QAAUD,EAAEC,SAAaD,EAAE9E,WAC1E2E,EAAYA,EAAUK,QAAO,SAAAC,GAAC,OAAIA,EAAEF,UAAYxD,EAAQ2D,OACxDmB,EAAU1B,QAEf,IACH,IAAMhF,EAAQ,uCAAG,WAAOJ,GAAP,mBAAAK,EAAA,yDACT0G,EAAU,GAEd/G,EAAEM,iBACC0B,EAAQK,WAAaQ,EAJX,wBAKHmE,EAAU/H,EAAegI,MAAMC,MAArB,UAA8BlF,EAAQ2D,IAAtC,WALP,SAMcqB,EAAQG,UAAUtE,EAAO,YANvC,cAMHuE,EANG,gBAOOA,EAASH,IAAII,iBAPpB,cAOTN,EAPS,iBASH/E,EAAQsF,cAAc,CAAEjF,SAAW0E,IAThC,QAUTZ,IAVS,WAYVnE,EAAQE,cAAgBoE,EAZd,kCAaHtE,EAAQsF,cAAc,CAAEpF,YAAcoE,IAbnC,QAcTH,IAdS,QAiBbC,EAAQmB,KAAK,KAjBA,4CAAH,sDAkCRC,EAAQ,uCAAG,sBAAAnH,EAAA,0DACF4C,OAAOC,QAAP,+PADE,gCAGH2D,EAAOvB,KAAI,SAACvD,GAAWhD,EAAUoE,IAAV,gBAAuBpB,EAAKqB,KAAMC,YAHtD,OAIIxE,EAAY4I,YACpBpE,SAASqE,MAAK,WACf7I,EAAYwE,YANP,OASb+C,EAAQmB,KAAK,KATA,2CAAH,qDAYd,OACI,0BAAS1G,UAAY,QAArB,UACI,sBAAKA,UAAY,UAAjB,UACI,wBAAQA,UAAY,IAAII,QAAW,WAAQyF,GAAW,SAAAxF,GAAI,OAAKA,MAA/D,kCACEuF,GACE,qBAAK5F,UAAY,UAAjB,SACI,uBAAMA,UAAY,UAAUT,SAAYA,EAAxC,UACI,qBAAKS,UAAY,QAAQ2C,IAAOX,EAAOY,MAAQ,QAAQC,OAAS,QAAQC,IAAKd,IAC7E,uBAAOhC,UAAY,eACfC,KAAO,OACPgD,OAAS,UACT/D,SAlCP,SAACC,GAClB,IACM+D,EADwB/D,EAAvBC,OAAW+D,MACI,GAChBC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,SAACC,GAChB,IAAyBC,EAAYD,EAA7BE,cAAiBD,OACzBmC,EAASnC,IAEbJ,EAAOM,cAAcR,MA2BD,uBAAOlD,UAAY,UACfC,KAAO,UACPX,MAASmG,EACTvF,YAAc,iEACdhB,SA5CX,SAACC,GACd,IAAkBG,EAAWH,EAArBC,OAAUE,MAClBoG,EAAWpG,MA4CS,uBAAOU,UAAY,aAAaC,KAAO,SAASX,MAAQ,iBACxD,wBAAQU,UAAY,gBAAgBI,QAAW,WAAQyF,GAAW,SAAAxF,GAAI,OAAKA,MAA3E,oCAMhB,sBAAKL,UAAY,UAAjB,UACI,wBAAQA,UAAY,IAAII,QAAW,WAAQ2F,GAAW,SAAA1F,GAAI,OAAKA,MAA/D,yCACEyF,GACE,8BACA,uBAAM9F,UAAY,UAAlB,UACI,oBAAGA,UAAY,WAAf,2EACsBmB,EAAQ3C,MAD9B,KACsC,uBAAK,uBAD3C,yGAE0B,uBAF1B,uGAGwB,uBAHxB,iEAIgB,0BAEhB,wBAAQwB,UAAY,aAAaI,QAAW,WAAQuG,KAApD,4BACA,wBAAQ3G,UAAY,eAAeI,QAAW,WAAQ2F,GAAW,SAAA1F,GAAI,OAAKA,MAA1E,yC,gBCzFTyG,G,MAZF,SAAC,GAAqC,IAAnCxH,EAAkC,EAAlCA,MAAOJ,EAA2B,EAA3BA,SAAU6H,EAAiB,EAAjBA,WAC7B,OACI,mCACI,uBAAO/G,UAAY,OACfV,MAAUA,EACVJ,SAAaA,EACb6H,WAAeA,EACf7G,YAAc,2DCOf8G,G,MAdI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxB,OACI,sBAAKlH,UAAY,aAAjB,UACQ,yBAASA,UAAY,eAArB,SACMiH,IAGN,yBAASjH,UAAY,OAArB,SACMkH,S,gCCoBPC,G,iLA3BX,SAAsBC,EAAWC,GAC7B,OAAOC,KAAKC,MAAM3G,UAAYwG,EAAUxG,U,oBAG5C,WACI,MAAkD0G,KAAKC,MAA/CC,EAAR,EAAQA,KAAM5G,EAAd,EAAcA,QAAS2B,EAAvB,EAAuBA,GAAIkF,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAErC,OACI,sBAAK1H,UAAY,YAAYI,QAAW,kBAAMqH,EAASlF,IAAvD,UACI,qBAAKvC,UAAY,SAASI,QAAW,SAACjB,GAClCA,EAAEwI,kBACFD,EAASnF,IAFb,kBAOA,qBAAKvC,UAAY,YAAjB,SACI,oCAAQwH,EAAR,SAGD5G,GAAY,qBAAKZ,UAAU,aAAf,6B,GArBV4H,cC4BNC,E,2KA3BX,SAAsBT,EAAWC,GAC7B,OAAOC,KAAKC,MAAMO,QAAUV,EAAUU,Q,oBAG1C,WACI,MAAsCR,KAAKC,MAAnCO,EAAR,EAAQA,MAAOL,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,SAEnBK,EAAWD,EAAMrD,KACnB,gBAAElC,EAAF,EAAEA,GAAIiF,EAAN,EAAMA,KAAM5G,EAAZ,EAAYA,QAAZ,OACI,cAAC,EAAD,CACQ2B,GAAMA,EACNiF,KAAQA,EACR5G,QAAWA,EACX6G,SAAYA,EACZC,SAAYA,GACLnF,MAIvB,OACI,8BACMwF,Q,GAtBGH,a,QC0FNI,G,YAnFF,WACT,IAAItH,EAAO,IAAIC,KACf,EAA0BpC,mBAASmC,GAAnC,mBAAOpB,EAAP,KAAcJ,EAAd,KAEIqD,EAAK,EACT,EAA0BhE,mBAAS,IAAnC,mBAAO0J,EAAP,KAAcC,EAAd,KACA,EAA0B3J,mBAAS,IAAnC,mBAAOuJ,EAAP,KAAcK,EAAd,KAMMC,EAAe,WACjB,IADuB,EACjBC,EAAWJ,EACXK,EAAUR,EACZS,EAAQ,EAHW,cAKVF,GALU,IAKvB,IAAI,EAAJ,qBAAsB,CACX,MADW,UAElBE,GAAS,IAPU,8BAUpBA,IAAUF,EAASnD,OACpBgD,EAAS,KAGTA,EAAS,IACTxI,QAAQC,IAAI,KAAK4C,GACjB4F,EAASG,EAAQE,OAAO,CAAEjG,GAAKA,IAAMiF,KAAOS,EAAOrH,SAAU,KAC7DlB,QAAQC,IAAI,KAAK4C,KA0BvB,OACI,sBAAKvC,UAAY,UAAjB,UACI,cAAC,IAAD,CACQd,SAAYA,EACZI,MAASA,IAEjB,sBAAKU,UAAY,cAAjB,UACI,mBAAGA,UAAY,SAAf,0CACA,cAAC,EAAD,CACQiH,KACI,cAAC,EAAD,CACI3H,MAAU2I,EACV/I,SA3DP,SAACC,GAClB+I,EAAS/I,EAAEC,OAAOE,QA2DMmJ,SAAaL,EACbrB,WApCL,SAAC5H,GACP,UAAVA,EAAEuJ,KACHN,OA4BM,SASQ,cAAC,EAAD,CACIN,MAAUA,EACVL,SAnCH,SAAClF,GAClB,IAAMoG,EAAWb,EAEXc,EAAMD,EAASE,WAAU,SAAAhE,GAAC,OAAIA,EAAEtC,KAAOA,KACvCuG,EAAWH,EAASC,GACpBG,EAAM,YAAOJ,GAEnBI,EAAOH,GAAP,2BAAmBE,GAAnB,IAA6BlI,SAAWkI,EAASlI,UACjDuH,EAASY,IA4BWrB,SAzBH,SAACnF,GAElB4F,EADWL,EACClD,QAAO,SAAAC,GAAC,OAAIA,EAAEtC,KAAOA,mBCS1ByG,G,MAlED,SAAC,GAAiB,IAAf7H,EAAc,EAAdA,QACPoE,EAAUC,cAChB,EAA0BjH,mBAAS,IAAnC,mBAAOgC,EAAP,KAAc0I,EAAd,KACA,EAAwB1K,mBAAS,IAAjC,mBAAO2C,EAAP,KAAagI,EAAb,KACA,EAAoC3K,mBAAS,IAA7C,mBAAO4K,EAAP,KAAmBC,EAAnB,KAEMlK,EAAW,SAACC,GACd,MAAiCA,EAA3BC,OAAUC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MAEV,UAATD,EAAmB4J,EAAS3J,IACvBD,EAAO,SAAS6J,EAAQ5J,IAa9BC,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,6DACbL,EAAEM,iBADW,SAGPvB,EAAUkG,WAAW,SAASiF,IAAI,CACpC9I,MAAQA,EACRW,KAAOA,EACPc,MAAQmH,EACR3I,UAAYG,KAAK2I,MACjB3E,QAAUxD,EAAQ2D,IAClBxD,KAAOH,EAAQ3C,QATN,OAYb+G,EAAQmB,KAAK,KAZA,2CAAH,sDAed,OACI,mCACI,uBAAM1G,UAAY,WAAWT,SAAYA,EAAzC,UACI,uBAAOS,UAAY,SACfC,KAAO,QACPX,MAASiB,EACTlB,KAAO,QACPH,SAAYA,EACZgB,YAAc,oDACdC,UAAQ,IAEZ,uBAAOH,UAAY,QACfC,KAAO,OACPX,MAAS4B,EACT7B,KAAO,OACPH,SAAYA,EACZgB,YAAc,oDACdC,UAAQ,IAEZ,uBAAOH,UAAY,SAASC,KAAO,OAAOgD,OAAS,UAAU/D,SA7CpD,SAACC,GAClB,IACM+D,EADwB/D,EAAvBC,OAAW+D,MACI,GAChBC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,SAACC,GAChB,IAAyBC,EAAYD,EAA7BE,cAAiBD,OACzB4F,EAAc5F,IAElBJ,EAAOM,cAAcR,MAqCb,uBAAOlD,UAAY,eAAeC,KAAO,SAASX,MAAQ,iBAC1D,wBAAQU,UAAY,eAAeI,QAAW,WAAOmF,EAAQmB,KAAK,MAAlE,mCC3CD6C,G,MAnBC,SAAC,GAAc,IAAZrI,EAAW,EAAXA,KACTR,EAAO,IAAIC,KAAKO,EAAKV,WACrBgJ,EAAStI,EAAKI,KAEpB,OACI,sBAAKtB,UAAY,MAAjB,UACA,oBAAGA,UAAY,WAAf,cAA4BkB,EAAKX,MAAjC,OACA,sBAAKP,UAAY,cAAjB,UAEI,4BAAIwJ,IACJ,oBAAGxJ,UAAY,OAAf,oBAAyBU,EAAKI,cAA9B,KAA+CJ,EAAKK,WAAW,EAA/D,KAAoEL,EAAKM,UAAzE,IAAqFN,EAAKqC,WAA1F,IAAuGrC,EAAKsC,aAA5G,UAEF9B,EAAKc,OAAS,qBAAKhC,UAAY,YAAY2C,IAAKzB,EAAKc,MAAOY,MAAQ,QAAQC,OAAS,QAAQC,IAAM5B,EAAKc,QAC1G,oBAAGhC,UAAY,OAAf,cAAwBkB,EAAKA,QAC7B,4BCaOuI,EAxBD,WACV,MAA8BlL,mBAAS,IAAvC,mBAAOmL,EAAP,KAAgBC,EAAhB,KASA,OARAxF,qBAAU,WACNjG,EAAUkG,WAAW,SAASC,YAAW,SAACC,GACtC,IAAIC,EAAYD,EAAEE,KAAKC,KAAI,SAACC,GAAD,oBAASnC,GAAKmC,EAAEnC,GAAIoC,QAAUD,EAAEC,SAAaD,EAAE9E,WAC1E2E,EAAUQ,MAAK,SAASvF,EAAGwF,GAAK,OAAOA,EAAExE,UAAYhB,EAAEgB,aACvDmJ,EAAWpF,QAEhB,IAGC,sBAAKvE,UAAY,WAAjB,UACI,sBAAKA,UAAY,QAAjB,UACI,+CACA,oKAEJ,uBACA,qBAAKA,UAAY,UAAjB,SACM0J,EAAQjF,KAAI,SAAAW,GAAC,OAAI,cAAC,EAAD,CAASlE,KAAQkE,aCDrCwE,G,MAjBI,WACf,IAAMrE,EAAUC,cAEhB,OACI,8BACI,qBAAIxF,UAAY,OAAhB,UACI,6BAAI,wBAAQA,UAAY,SAASI,QAAW,WAAQmF,EAAQmB,KAAK,aAA7D,2CACJ,+BAAI,wBAAQ1G,UAAY,SAASI,QAAW,WAAQmF,EAAQmB,KAAK,MAA7D,yCAAJ,OACA,6BAAI,wBAAQ1G,UAAY,SAASI,QAAW,WACxCpC,EAAY6L,UACZtE,EAAQmB,KAAK,MAFb,iDC8BLoD,MAjCf,YAA2D,IAArC3I,EAAoC,EAApCA,QAAS4I,EAA2B,EAA3BA,WAAYzE,EAAe,EAAfA,YACvC,OACI,eAAC,IAAD,WACMyE,GAAc,cAAC,EAAD,IAChB,cAAC,IAAD,UACMA,EACE,qCACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAApB,SACI,cAAC,EAAD,CAAM9I,QAAWA,EAASmE,YAAeA,MAE7C,cAAC,IAAD,CAAO0E,OAAK,EAACC,KAAO,WAApB,SACI,cAAC,EAAD,CAAS9I,QAAWA,EAASmE,YAAeA,MAEhD,cAAC,IAAD,CAAO0E,OAAK,EAACC,KAAO,QAApB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAO,SAApB,SACI,cAAC,EAAD,CAAO9I,QAAWA,MAEtB,cAAC,IAAD,CAAO6I,OAAK,EAACC,KAAO,WAApB,SACI,cAAC,EAAD,SAIR,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAO,IAApB,SACI,cAAC,EAAD,YCMTC,MArCf,WACE,MAAuB3L,oBAAS,GAAhC,mBAAM4L,EAAN,KAAYC,EAAZ,KACA,EAA8B7L,mBAAS,MAAvC,mBAAO4C,EAAP,KAAgBkJ,EAAhB,KAqBA,OAnBAlG,qBAAU,WACRnG,EAAYsM,oBAAmB,SAACC,GAE5BF,EADEE,EACS,CACTlJ,YAAckJ,EAAKlJ,YACnByD,IAAMyF,EAAKzF,IACXtG,MAAQ+L,EAAK/L,MACbgD,SAAW+I,EAAK/I,SAChBiF,cAAgB,SAAC+D,GAAD,OAAUD,EAAK9D,cAAc+D,KAE7B,MACpBJ,GAAQ,QAER,IAOF,mCACED,EACA,cAAC,EAAD,CACEhJ,QAAWA,EACX4I,WAAcU,QAAQtJ,GACtBmE,YAVc,WAClB+E,EAAWrM,EAAY4I,gBAWrB,oEC/BN8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.66536e36.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAQgYMgzcDHfDvvMYUXEeCilFdCl-HeVc0\",\r\n    authDomain: \"myblog-c1477.firebaseapp.com\",\r\n    projectId: \"myblog-c1477\",\r\n    storageBucket: \"myblog-c1477.appspot.com\",\r\n    messagingSenderId: \"351753636551\",\r\n    appId: \"1:351753636551:web:34c6aec4a834e850bfcce2\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase; \r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\r\nimport { authService } from \"fbase\";\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [pw, setPw] = useState('');\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [manual, setManual] = useState(false);\r\n\r\n    const onChange = (e) => {\r\n        const{target : { name, value }} = e;\r\n        \r\n        if(name === 'email') { setEmail(value); } \r\n        else if(name === 'pw') { setPw(value); }\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            let data;\r\n            console.log(data);\r\n            if(newAccount){\r\n                data = await authService.createUserWithEmailAndPassword(email, pw);\r\n            }\r\n            else {\r\n                data = await authService.signInWithEmailAndPassword(email, pw);\r\n            }\r\n\r\n        } catch(error){\r\n            setError(error.message);\r\n        } \r\n    }\r\n\r\n    const toggleAccount = () => { setNewAccount((prev) => !prev); }\r\n\r\n    return(\r\n        <>\r\n            <form className = 'loginbox' onSubmit = {onSubmit}>\r\n                <p className = 'ltext'>\r\n                    My_Blog<br></br>\r\n                    LOGIN \r\n                </p>\r\n                <input className = 'inputbox'\r\n                    name = 'email'\r\n                    type = 'email'\r\n                    placeholder = '이메일을 입력해주세요'\r\n                    required\r\n                    value = {email}\r\n                    onChange = {onChange}\r\n                />\r\n                <input className = 'inputbox'\r\n                    name = 'pw'\r\n                    type = 'pw'\r\n                    placeholder = '비밀번호를 입력해주세요'\r\n                    required\r\n                    value = {pw}\r\n                    onChange = {onChange}\r\n                />\r\n                { error }\r\n                <input className = 'lbutton' type='submit' value = { newAccount ? '시작하기' :'로그인'} />\r\n                <span className = 'ctext' onClick = {toggleAccount}> { newAccount ? \"이미 계정이 있다면?\" : \"계정 만들기\" } </span>\r\n            </form>\r\n\r\n            <div className = 'manual'>\r\n                <button className = 'mbutton' onClick = {()=> {setManual(prev => !prev)}}> { manual ? '설명서 닫기' : '설명서 열기'} </button>\r\n                { manual && (\r\n                    <p className = 'exp'>\r\n                        마이 블로그 설명서 💭<br/>\r\n                        <br/>1️⃣ 계정 생성 후 프로필을 설정해주세요<br/>\r\n                        (user는 초기 닉네임입니다.)<br/>\r\n                        (프로필 설정 : 홈 화면 왼쪽 프로필 박스의 '블로그관리' 버튼)<br/>\r\n\r\n                        <br/>2️⃣ 홈 화면 프로필 박스 아래 시계를 누르면 투두로 이동합니다<br/>\r\n                        하루 일정을 마이 블로그에 기록해보세요 (❁´◡`❁)<br/>\r\n\r\n                        <br/>3️⃣ 블로그 홈에서는 다른 이용자들이 쓴 글을 볼 수 있어요<br/>\r\n                        단, 홈에서 보이는 글은 본인의 글이라도 수정 및 삭제가 불가합니다.<br/>\r\n                        수정/삭제는 '내 블로그' 에서 해주세요!<br/>\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React, { useState } from 'react';\r\nimport './PostList.css';\r\n\r\nconst PostList = ({ title, createdAt, edit }) =>{\r\n    const date = new Date(createdAt);\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    return(\r\n        <div>\r\n            <div className = 'titleNtime'>\r\n                <p className = 'Title'> \r\n                    { edit && \r\n                        <button className = 'editcheck' onClick = {() => { setChecked(prev => !prev); }}> \r\n                            { checked ? '🔳' : '⬜' } \r\n                        </button>\r\n                    } \r\n                    {title}\r\n                </p> \r\n                <p className = 'Time'>{date.getFullYear()}.{date.getMonth()+1}.{date.getDate()}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostList;","import { dbService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport './Post.css';\r\n\r\nconst Post = ({ post, userObj, isOwner }) => {\r\n    const [nick, setNick] = useState(userObj.displayName);\r\n    const [profile] = useState(userObj.photoURL);\r\n    const [editing, setEditing] = useState(false);\r\n    \r\n    const date = new Date(post.createdAt);\r\n    const [newTitle, setNewTitle] = useState(post.title);\r\n    const [newPost, setNewPost] = useState(post.post);\r\n    const [newPhoto, setNewPhoto] = useState(post.photo);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(`삭제한 글은 복구가 불가능합니다.\\n글을 삭제하시겠습니까?`);\r\n        if (ok) { await dbService.doc(`posts/${post.id}`).delete(); }\r\n    }\r\n    const toggleEditing = () => {\r\n        setEditing(prev => !prev);\r\n    }\r\n    const onChange = (e) => {\r\n        const{ target : {name, value} } = e;\r\n\r\n        if(name === 'title') { setNewTitle(value); }\r\n        else if (name === 'post') { setNewPost(value); }\r\n    }\r\n    const onFileChange = (e) => {\r\n        const{ target : { files } } = e;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedE) => {\r\n            const { currentTarget : {result} } = finishedE;\r\n            setNewPhoto(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        dbService.doc(`posts/${post.id}`).update({\r\n            title : newTitle,\r\n            post : newPost,\r\n            photo : newPhoto\r\n        });\r\n        setEditing(false);\r\n    }\r\n\r\n    if(nick === null){ setNick('user'); }\r\n\r\n    return(\r\n        <div>\r\n            { editing ? (\r\n                <div className = 'editboxx'>\r\n                    <form className = 'editing' onSubmit = {onSubmit}> \r\n                        <input className = 'titlebox'\r\n                            name = 'title'\r\n                            type='title' \r\n                            placeholder = \"새 제목\" \r\n                            value = {newTitle}\r\n                            onChange = {onChange}\r\n                            required\r\n                        />\r\n                        <div className = 'writerntime'>\r\n                            <img className = 'wrphoto' src = {profile} width = '30px' height = '30px' alt = {profile} />\r\n                            <p>{nick }</p>\r\n                            <p className = 'time'> ・{date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()} </p>\r\n                        </div>\r\n                        { newPhoto && <img className = 'postphoto' src={newPhoto} width = '200px' height = '200px' alt= {newPhoto}/> }\r\n                        <input className = 'photobox'\r\n                            type = 'file'\r\n                            accept = 'image/*'\r\n                            onChange = {onFileChange}\r\n                        />\r\n                        <input className = 'postbox'\r\n                            name = 'post'\r\n                            type='post' \r\n                            placeholder = \"새 본문\" \r\n                            value = {newPost} \r\n                            onChange = {onChange}\r\n                            required\r\n                        /> \r\n                        <input className = 'ebutton' type='submit' value = '수정' />\r\n                        <button className = 'ecbutton' onClick = {toggleEditing}> 취소 </button>\r\n                    </form>\r\n                </div>    \r\n                ) :\r\n                <div className = 'one'>\r\n                    <p className = 'postitle'> {post.title} </p>\r\n                    <div className = 'writerntime'>\r\n                        <img className = 'wrphoto' src = {profile} width = '30px' height = '30px' alt = {profile} />\r\n                        <p>{nick }</p>\r\n                        <p className = 'time'> ・{date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()} </p>\r\n                    </div>\r\n                    { post.photo && <img className = 'postphoto' src={post.photo} width = '200px' height = '200px' alt= {post.photo}/> }\r\n                    <p className = 'text'> {post.post}</p>\r\n                    \r\n                    <div className = 'buttons'>\r\n                        { isOwner &&\r\n                            <>\r\n                            <button className = 'editNdelete' onClick = {toggleEditing}> 수정 </button>\r\n                            <button className = 'editNdelete' onClick = {onDeleteClick}> 삭제 </button>\r\n                            </>\r\n                        }     \r\n                    </div>\r\n                    <br></br>\r\n                </div> \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React, { useEffect, useState } from 'react';\r\nimport { dbService } from 'fbase';\r\nimport { Link } from 'react-router-dom';\r\nimport PostList from './PostList';\r\nimport Post from './Post';\r\nimport './Home.css';\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [name, setName] = useState(userObj.displayName);\r\n    const [photo] = useState(userObj.photoURL);\r\n    const [listing, setListing] = useState(false);\r\n    const [listEdit, setListEdit] = useState(true);\r\n    const [titles, setTitles] = useState([]);\r\n    const date = new Date();\r\n    \r\n    useEffect(() => {\r\n        dbService.collection('posts').onSnapshot((s) => {\r\n            let postArray = s.docs.map((d) => ({id : d.id, creator : d.creator , ...d.data()}));\r\n            postArray = postArray.filter(i => i.creator === userObj.uid);\r\n            postArray.sort(function(a, b) { return b.createdAt - a.createdAt; });\r\n            setTitles(postArray);\r\n        })\r\n    }, []);\r\n\r\n    if(name === null){ setName('user'); }\r\n    \r\n    return(\r\n        <section className = 'entire'>\r\n            <div>\r\n                <div className = 'profilebox'>\r\n                    <img src = {photo} width = '161px' height = '184px' alt = {photo}/>\r\n                    <div className = 'nick'>\r\n                        <strong> {name} </strong>\r\n                        <h5 className = 'email'> ({userObj.email}) </h5>\r\n                    </div>\r\n                    <h6 className = 'profilebutton'><Link to ='/profile'> 블로그관리 </Link></h6>\r\n                    <h6 className = 'writebutton'><Link to ='/write'> 글쓰기 </Link></h6>\r\n                </div>\r\n                <p className = 'timetotd'><Link to ='/todo'> { date.getHours() }:{ date.getMinutes() } </Link></p>\r\n            </div>\r\n\r\n            <div className = 'rightbox'>\r\n                <div className = 'listbox'>\r\n                    <button className = 'listbutton' onClick = {() => { \r\n                        setListing(prev => !prev); \r\n                        setListEdit(prev => !prev);\r\n                    }}> \r\n                        { listing ? '목록 닫기' : '목록 열기' } \r\n                    </button>\r\n                    <p className = 'postcount'>・ { titles.length }개의 글</p>\r\n                </div>\r\n                <div className = 'list'>\r\n                    { listing &&\r\n                        (titles.map(t => \r\n                            <PostList key = {t.createdAt} createdAt = {t.createdAt} title = {t.title} edit = {listEdit}/>\r\n                    ))}\r\n                    { listing && \r\n                        <button className = 'editbutton' onClick = {() => { setListEdit(prev => !prev); }}> \r\n                            { listEdit ? '글관리 닫기 ' : '글관리 열기' }\r\n                        </button>\r\n                    }\r\n                </div>\r\n                <br></br>\r\n                <div className = 'posts'> { titles.map(p => <Post key = {p.createdAt} post = {p} userObj = {userObj} isOwner = {true}/> )} </div>  \r\n            </div>      \r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Home;","import { authService, dbService, storageService } from 'fbase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Profile.css';\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n    const history = useHistory();\r\n    const [newName, setNewName] = useState(userObj.displayName);\r\n    const [photo, setPhoto] = useState(userObj.photoURL);\r\n    const [pbutton, setPbutton] = useState(false);\r\n    const [cbutton, setCbutton] = useState(false);\r\n    const [mypost, setMyPost] = useState([]);\r\n\r\n    useEffect(() => {\r\n        dbService.collection('posts').onSnapshot((s) => {\r\n            let postArray = s.docs.map((d) => ({id : d.id, creator : d.creator , ...d.data()}));\r\n            postArray = postArray.filter(i => i.creator === userObj.uid);\r\n            setMyPost(postArray);\r\n        })\r\n    }, []);\r\n    const onSubmit = async (e) => {\r\n        let fileURL = '';\r\n\r\n        e.preventDefault();\r\n        if(userObj.photoURL !== photo){\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/photo`);\r\n            const response = await fileRef.putString(photo, \"data_url\");\r\n            fileURL = await response.ref.getDownloadURL();\r\n            \r\n            await userObj.updateProfile({ photoURL : fileURL });\r\n            refreshUser();\r\n        }\r\n        if(userObj.displayName !== newName) {\r\n            await userObj.updateProfile({ displayName : newName });\r\n            refreshUser();\r\n        }\r\n\r\n        history.push('/');\r\n    }\r\n    const onChange = (e) => {\r\n        const { target : {value} } = e;\r\n        setNewName(value);\r\n    }\r\n    const onFileChange = (e) => {\r\n        const{ target : { files } } = e;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedE) => {\r\n            const { currentTarget : {result} } = finishedE;\r\n            setPhoto(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onDelete = async () => {\r\n        const ok = window.confirm(`진짜 삭제하시겠습니까?\\n(확인을 누르면 로그인 화면,\\n취소를 누르면 내 블로그 홈으로 이동합니다)`);\r\n        if(ok) {\r\n            await mypost.map((post) => { dbService.doc(`posts/${post.id}`).delete(); });\r\n            const user = authService.currentUser;\r\n            user.delete().then(() => {\r\n                authService.delete();\r\n            })\r\n        } \r\n        history.push('/');     \r\n    }\r\n    \r\n    return(\r\n        <section className = 'boxes'> \r\n            <div className = 'pbutton'>\r\n                <button className = 'b' onClick = {() => { setPbutton(prev => !prev); }}> 프로필 </button>\r\n                { pbutton &&\r\n                    <div className = 'eentire'>\r\n                        <form className = 'editbox' onSubmit = {onSubmit}>\r\n                            <img className = 'image' src = {photo} width = '161px' height = '184px' alt={photo} />\r\n                            <input className = 'image-upload'\r\n                                type = 'file'\r\n                                accept = 'image/*'\r\n                                onChange = {onFileChange}\r\n                            />\r\n                            <input className = 'newnick'\r\n                                type = 'newName'\r\n                                value = {newName}\r\n                                placeholder = '새 닉네임을 입력하세요'\r\n                                onChange = {onChange}\r\n                            /> \r\n                            <input className = 'newprofile' type = 'submit' value = '수정' />\r\n                            <button className = 'cancleprofile' onClick = {() => { setPbutton(prev => !prev); } }> 취소 </button>\r\n                        </form>\r\n                    </div>}       \r\n                \r\n            </div>\r\n\r\n            <div className = 'cbutton'>\r\n                <button className = 'c' onClick = {() => { setCbutton(prev => !prev); }}> 회원 탈퇴 </button>\r\n                { cbutton && \r\n                    <div>\r\n                    <form className = 'editbox'>\r\n                        <p className = 'deletext'>\r\n                            ( 현재 로그인 중인 계정 : {userObj.email} )<br/><br/>\r\n                            회원 탈퇴시 작성한 글은 모두 삭제되며,<br/>\r\n                            삭제된 블로그는 복구가 불가능합니다.<br/>\r\n                            정말 삭제하시겠습니까?<br/>\r\n                        </p>\r\n                        <button className = 'deleteblog' onClick = {() => { onDelete(); }}> 확인 </button>\r\n                        <button className = 'cancledelete' onClick = {() => { setCbutton(prev => !prev); } }> 취소 </button>\r\n                    </form>\r\n                    </div>}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({ value, onChange, onKeyPress }) => {\r\n    return(\r\n        <>\r\n            <input className = \"form\"\r\n                value = { value } \r\n                onChange = { onChange } \r\n                onKeyPress = { onKeyPress } \r\n                placeholder = '할 일을 입력하세요'\r\n            /> \r\n        </>\r\n    );\r\n}\r\nexport default Form;","import React from 'react';\r\nimport './TdTemplate.css';\r\n\r\nconst TdTemplate = ({ form, children }) => {\r\n    return(\r\n        <div className = \"tdtemplate\">\r\n                <section className = \"form-wrapper\">\r\n                    { form }\r\n                </section>\r\n\r\n                <section className = \"todo\">\r\n                    { children }\r\n                </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TdTemplate;\r\n","import React, { Component } from 'react';\r\nimport './TdItem.css';\r\n\r\nclass TdItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render(){\r\n        const { text, checked, id, onToggle, onRemove } = this.props;\r\n \r\n        return(\r\n            <div className = \"todo-item\" onClick = {() => onToggle(id)}>\r\n                <div className = \"remove\" onClick = {(e) => {\r\n                    e.stopPropagation();\r\n                    onRemove(id); \r\n                }}>\r\n                    &times;\r\n                </div>\r\n                    \r\n                <div className = 'todo-text'>\r\n                    <div> { text } </div>\r\n                </div>\r\n\r\n                 { checked && (<div className=\"check-mark\"> ✓ </div>) }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TdItem;","import React, { Component } from 'react';\r\nimport TdItem from \"./TdItem\";\r\n\r\nclass TdList extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render(){\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map( \r\n            ({id, text, checked}) => (\r\n                <TdItem \r\n                        id = {id} \r\n                        text = {text} \r\n                        checked = {checked} \r\n                        onToggle = {onToggle}\r\n                        onRemove = {onRemove}\r\n                        key = {id}\r\n                />\r\n        ));\r\n\r\n        return(\r\n            <div>\r\n                { todoList }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TdList;","import React, { useState } from 'react';\r\n\r\nimport Form from './Todos/Form';\r\nimport TdTemplate from './Todos/TdTemplate';\r\nimport TdList from './Todos/TdList';\r\n\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './Todo.css';\r\n\r\nconst Todo = () => {\r\n    let date = new Date();\r\n    const [value, onChange] = useState(date);\r\n    \r\n    let id = 0;\r\n    const [input, setInput] = useState('');\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n    \r\n    const handleCreate = () => {\r\n        const newinput = input;\r\n        const newtodo = todos;\r\n        let space = 0;\r\n    \r\n        for(let i of newinput){\r\n          if(i === ' ')\r\n            space += 1;\r\n        }\r\n    \r\n        if(space === newinput.length)\r\n          setInput('');\r\n    \r\n        else {\r\n          setInput('');\r\n          console.log('1:',id);\r\n          setTodos(newtodo.concat({ id : id++, text : input, checked : false }));\r\n          console.log('2:',id);\r\n        }\r\n    }\r\n    \r\n    const handleKeyPress = (e) => {\r\n        if(e.key === 'Enter') {\r\n          handleCreate();\r\n        }\r\n    }\r\n    \r\n    const handleToggle = (id) => {\r\n        const newtodos = todos;\r\n        \r\n        const ind = newtodos.findIndex(i => i.id === id);\r\n        const selected = newtodos[ind];\r\n        const nextTd = [...newtodos];\r\n    \r\n        nextTd[ind] = { ...selected, checked : !selected.checked };\r\n        setTodos(nextTd);\r\n    }\r\n    \r\n    const handleRemove = (id) => {\r\n        const td = todos;\r\n        setTodos(td.filter(i => i.id !== id));\r\n    }\r\n\r\n    return(\r\n        <div className = 'todobox'>\r\n            <Calendar\r\n                    onChange = {onChange}\r\n                    value = {value}\r\n                />\r\n            <div className = 'realtodobox'>\r\n                <p className = 'title2'> 오늘 할 일 </p>\r\n                <TdTemplate \r\n                        form = { \r\n                            <Form \r\n                                value = { input }  \r\n                                onChange = { handleChange }\r\n                                onCreate = { handleCreate }\r\n                                onKeyPress = { handleKeyPress }\r\n                            /> \r\n                        }>\r\n                        <TdList \r\n                            todos = { todos } \r\n                            onToggle = { handleToggle } \r\n                            onRemove = { handleRemove }\r\n                        />\r\n                    </TdTemplate>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import { dbService } from 'fbase';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nimport './Write.css';\r\n\r\nconst Write = ({ userObj }) => {\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState('');\r\n    const [post, setPost] = useState('');\r\n    const [attachment, setAttactment] = useState(''); \r\n\r\n    const onChange = (e) => {\r\n        let { target : {name, value} } = e;\r\n        \r\n        if(name === 'title'){ setTitle(value); } \r\n        else if(name = 'post'){ setPost(value); }\r\n    }\r\n    const onFileChange = (e) => {\r\n        const{ target : { files } } = e;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onloadend = (finishedE) => {\r\n            const { currentTarget : {result} } = finishedE;\r\n            setAttactment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        await dbService.collection('posts').add({\r\n            title : title,\r\n            post : post,\r\n            photo : attachment,\r\n            createdAt : Date.now(),\r\n            creator : userObj.uid,\r\n            nick : userObj.email\r\n        });\r\n\r\n        history.push('/');\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <form className = 'writebox' onSubmit = {onSubmit}>\r\n                <input className = 'wtitle'\r\n                    type = 'title'\r\n                    value = {title}\r\n                    name = 'title'\r\n                    onChange = {onChange}\r\n                    placeholder = '제목을 입력하세요'\r\n                    required\r\n                />\r\n                <input className = 'wpost'\r\n                    type = 'post'\r\n                    value = {post}\r\n                    name = 'post'\r\n                    onChange = {onChange}\r\n                    placeholder = '본문을 입력하세요'\r\n                    required\r\n                />\r\n                <input className = 'wphoto' type = 'file' accept = 'image/*' onChange = {onFileChange} />\r\n                <input className = 'finishbutton' type = 'submit' value = '작성' />\r\n                <button className = 'canclebutton' onClick = {() => {history.push('/');}}> 취소 </button>\r\n            </form>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Write;","import React, { useState } from 'react';\r\n\r\nconst AllPost = ({ post }) => {\r\n    const date = new Date(post.createdAt);\r\n    const writer = post.nick;\r\n\r\n    return(\r\n        <div className = 'one'>\r\n        <p className = 'postitle'> {post.title} </p>\r\n        <div className = 'writerntime'>\r\n            {/* <img className = 'wrphoto' src = {profile} width = '30px' height = '30px' alt = {profile} /> */}\r\n            <p>{writer }</p>\r\n            <p className = 'time'> ・{date.getFullYear()}. {date.getMonth()+1}. {date.getDate()} {date.getHours()}:{date.getMinutes()} </p>\r\n        </div>\r\n        { post.photo && <img className = 'postphoto' src={post.photo} width = '200px' height = '200px' alt= {post.photo}/> }\r\n        <p className = 'text'> {post.post}</p>\r\n        <br></br>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AllPost;","import { dbService } from 'fbase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Blogs.css';\r\nimport AllPost from './AllPost';\r\n\r\nconst Blogs = () => {\r\n    const [allpost, setAllPost] = useState([]);\r\n    useEffect(() => {\r\n        dbService.collection('posts').onSnapshot((s) => {\r\n            let postArray = s.docs.map((d) => ({id : d.id, creator : d.creator , ...d.data()}));\r\n            postArray.sort(function(a, b) { return b.createdAt - a.createdAt; });\r\n            setAllPost(postArray);\r\n        })\r\n    }, []);\r\n\r\n    return(\r\n        <div className = 'eeentire'>\r\n            <div className = 'atext'>\r\n                <p> 🏡 </p>\r\n                <h6> 홈에서 다른 이용자들이 작성한 글을 읽어보세요 </h6>\r\n            </div>\r\n            <br></br>\r\n            <div className = 'allpost'> \r\n                { allpost.map(p => <AllPost post = {p}/> )} \r\n            </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Blogs;","import { authService } from 'fbase';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = () => {\r\n    const history = useHistory();\r\n\r\n    return(\r\n        <nav>\r\n            <ul className = 'menu'>\r\n                <li><button className = 'button' onClick = {() => { history.push('/allblog');}}> 블로그 홈 </button></li>\r\n                <li><button className = 'button' onClick = {() => { history.push('/');}}> 내 블로그 </button> </li>\r\n                <li><button className = 'button' onClick = {() => {\r\n                    authService.signOut();\r\n                    history.push('/');\r\n                }}> 로그아웃 </button></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from 'routes/Auth';\r\nimport Home from 'routes/Home';\r\nimport Profile from 'routes/Profile';\r\nimport Todo from 'routes/Todo';\r\nimport Write from 'routes/Write';\r\nimport Blogs from 'routes/Blogs';\r\nimport Navigation from 'components/Navigation';\r\n\r\nfunction BlogRouter({ userObj, isLoggedIn, refreshUser }) {\r\n    return(\r\n        <Router>\r\n            { isLoggedIn && <Navigation/> }\r\n            <Switch>\r\n                { isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path = \"/\">\r\n                            <Home userObj = {userObj} refreshUser = {refreshUser}/>\r\n                        </Route>\r\n                        <Route exact path = \"/profile\">\r\n                            <Profile userObj = {userObj} refreshUser = {refreshUser}/>\r\n                        </Route>\r\n                        <Route exact path = \"/todo\">\r\n                            <Todo />\r\n                        </Route>\r\n                        <Route exact path = '/write'>\r\n                            <Write userObj = {userObj}/>\r\n                        </Route>\r\n                        <Route exact path = '/allblog'>\r\n                            <Blogs />\r\n                        </Route>\r\n                    </> \r\n                ) : (\r\n                    <Route exact path = \"/\">\r\n                        <Auth />\r\n                    </Route>\r\n                )}  \r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default BlogRouter;","import React, { useEffect, useState } from 'react';\nimport { authService } from \"fbase\";\nimport BlogRouter from './Router';\n\nfunction App() {\n  const[init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) { \n        setUserObj({\n          displayName : user.displayName,\n          uid : user.uid,\n          email : user.email,\n          photoURL : user.photoURL,\n          updateProfile : (args) => user.updateProfile(args)\n        });\n      } else { setUserObj(null); }\n      setInit(true);\n    }\n  )}, []);\n\n  const refreshUser = () => {\n    setUserObj(authService.currentUser);\n  };\n\n  return (\n    <>\n    { init ?\n      <BlogRouter\n        userObj = {userObj}\n        isLoggedIn = {Boolean(userObj)}\n        refreshUser = {refreshUser}\n      /> :\n      '잠시만 기다려주세요 . . . '\n    }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}